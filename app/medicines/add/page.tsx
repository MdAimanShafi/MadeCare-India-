"use client"

import type React from "react"

import { useState } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { Heart, Plus, X, Clock, Pill, ArrowLeft } from "lucide-react"
import Link from "next/link"

export default function AddMedicinePage() {
  const router = useRouter()
  const [isLoading, setIsLoading] = useState(false)
  const [formData, setFormData] = useState({
    medicineName: "",
    dosage: "",
    frequency: "",
    startDate: "",
    endDate: "",
    notes: "",
    reminderTimes: [] as string[],
  })
  const [newTime, setNewTime] = useState("")

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!formData.medicineName || !formData.dosage || formData.reminderTimes.length === 0) {
      alert("Please fill all required fields and add at least one reminder time")
      return
    }

    setIsLoading(true)

    // Simulate API call to save medicine
    try {
      const medicineData = {
        ...formData,
        id: Date.now(), // In real app, this would be generated by backend
        userId: "current-user-id", // Would come from auth context
        createdAt: new Date().toISOString(),
      }

      // Save to localStorage for demo (in real app, this would be API call)
      const existingMedicines = JSON.parse(localStorage.getItem("userMedicines") || "[]")
      existingMedicines.push(medicineData)
      localStorage.setItem("userMedicines", JSON.stringify(existingMedicines))

      // Show success message
      alert("Medicine added successfully!")

      // Redirect to dashboard
      router.push("/dashboard")
    } catch (error) {
      alert("Error adding medicine. Please try again.")
    } finally {
      setIsLoading(false)
    }
  }

  const addReminderTime = () => {
    if (newTime && !formData.reminderTimes.includes(newTime)) {
      setFormData({
        ...formData,
        reminderTimes: [...formData.reminderTimes, newTime].sort(),
      })
      setNewTime("")
    }
  }

  const removeReminderTime = (timeToRemove: string) => {
    setFormData({
      ...formData,
      reminderTimes: formData.reminderTimes.filter((time) => time !== timeToRemove),
    })
  }

  const handleInputChange = (field: string, value: string) => {
    setFormData({
      ...formData,
      [field]: value,
    })
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-green-50">
      {/* Header */}
      <header className="bg-white border-b">
        <div className="container mx-auto px-4 py-4 flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <Link href="/dashboard">
              <Button variant="ghost" size="sm">
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Dashboard
              </Button>
            </Link>
            <div className="flex items-center space-x-2">
              <Heart className="h-6 w-6 text-blue-600" />
              <span className="text-xl font-bold text-gray-900">Add New Medicine</span>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        <div className="max-w-2xl mx-auto">
          <Card className="shadow-lg">
            <CardHeader>
              <CardTitle className="flex items-center">
                <Pill className="h-6 w-6 mr-2 text-blue-600" />
                Medicine Details
              </CardTitle>
              <CardDescription>Fill in the details below to set up your medicine reminder</CardDescription>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleSubmit} className="space-y-6">
                {/* Medicine Name */}
                <div className="space-y-2">
                  <Label htmlFor="medicineName">Medicine Name *</Label>
                  <Input
                    id="medicineName"
                    placeholder="e.g., Paracetamol, Vitamin D3"
                    value={formData.medicineName}
                    onChange={(e) => handleInputChange("medicineName", e.target.value)}
                    required
                  />
                </div>

                {/* Dosage */}
                <div className="space-y-2">
                  <Label htmlFor="dosage">Dosage *</Label>
                  <Input
                    id="dosage"
                    placeholder="e.g., 500mg, 1 tablet, 2 capsules"
                    value={formData.dosage}
                    onChange={(e) => handleInputChange("dosage", e.target.value)}
                    required
                  />
                </div>

                {/* Frequency */}
                <div className="space-y-2">
                  <Label htmlFor="frequency">Frequency</Label>
                  <Select onValueChange={(value) => handleInputChange("frequency", value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="How often?" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="once-daily">Once Daily</SelectItem>
                      <SelectItem value="twice-daily">Twice Daily</SelectItem>
                      <SelectItem value="three-times-daily">Three Times Daily</SelectItem>
                      <SelectItem value="four-times-daily">Four Times Daily</SelectItem>
                      <SelectItem value="as-needed">As Needed</SelectItem>
                      <SelectItem value="weekly">Weekly</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                {/* Date Range */}
                <div className="grid md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="startDate">Start Date</Label>
                    <Input
                      id="startDate"
                      type="date"
                      value={formData.startDate}
                      onChange={(e) => handleInputChange("startDate", e.target.value)}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="endDate">End Date (Optional)</Label>
                    <Input
                      id="endDate"
                      type="date"
                      value={formData.endDate}
                      onChange={(e) => handleInputChange("endDate", e.target.value)}
                    />
                  </div>
                </div>

                {/* Reminder Times */}
                <div className="space-y-4">
                  <Label>Reminder Times *</Label>
                  <div className="flex space-x-2">
                    <Input
                      type="time"
                      value={newTime}
                      onChange={(e) => setNewTime(e.target.value)}
                      placeholder="Select time"
                    />
                    <Button type="button" onClick={addReminderTime} variant="outline">
                      <Plus className="h-4 w-4" />
                    </Button>
                  </div>

                  {formData.reminderTimes.length > 0 && (
                    <div className="flex flex-wrap gap-2">
                      {formData.reminderTimes.map((time) => (
                        <Badge key={time} variant="secondary" className="flex items-center space-x-1">
                          <Clock className="h-3 w-3" />
                          <span>{time}</span>
                          <button
                            type="button"
                            onClick={() => removeReminderTime(time)}
                            className="ml-1 hover:text-red-600"
                          >
                            <X className="h-3 w-3" />
                          </button>
                        </Badge>
                      ))}
                    </div>
                  )}
                </div>

                {/* Notes */}
                <div className="space-y-2">
                  <Label htmlFor="notes">Additional Notes</Label>
                  <Textarea
                    id="notes"
                    placeholder="Any special instructions, side effects to watch for, etc."
                    value={formData.notes}
                    onChange={(e) => handleInputChange("notes", e.target.value)}
                    rows={3}
                  />
                </div>

                {/* Submit Button */}
                <div className="flex space-x-4">
                  <Button type="submit" className="flex-1" disabled={isLoading}>
                    {isLoading ? "Adding Medicine..." : "Add Medicine"}
                  </Button>
                  <Link href="/dashboard">
                    <Button type="button" variant="outline">
                      Cancel
                    </Button>
                  </Link>
                </div>
              </form>
            </CardContent>
          </Card>

          {/* Tips Card */}
          <Card className="mt-6 bg-blue-50 border-blue-200">
            <CardContent className="pt-4">
              <h3 className="font-medium text-blue-900 mb-2">ðŸ’¡ Tips for Better Medicine Management</h3>
              <ul className="text-sm text-blue-800 space-y-1">
                <li>â€¢ Set reminders 30 minutes before meal times if medicine should be taken with food</li>
                <li>â€¢ Add notes about any side effects you've experienced</li>
                <li>â€¢ Use specific dosage information (e.g., "500mg tablet" instead of just "1 tablet")</li>
                <li>â€¢ Set end dates for antibiotics and temporary medications</li>
              </ul>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}
